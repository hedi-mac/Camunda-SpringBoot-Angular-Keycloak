/*
 * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH
 * under one or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information regarding copyright
 * ownership. Camunda licenses this file to you under the Apache License,
 * Version 2.0; you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.example.workflow;

import org.camunda.bpm.application.ProcessApplication;
import org.camunda.bpm.application.impl.ServletProcessApplication;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@ProcessApplication
@SpringBootApplication
public class app {

  public static void main(String... args) {
    SpringApplication.run(app.class, args);
    
    Authorization auth = authorizationService.createNewAuthorization(AUTH_TYPE_GRANT);

 // The authorization object can be configured either for a user or a group:
 auth.setUserId("john");
 //  -OR-
 auth.setGroupId("management");

 //and a resource:
 auth.setResource("filter");
 auth.setResourceId("2313");
 // a resource can also be a process definition
 auth.setResource(Resources.PROCESS_INSTANCE);
 // the process defintion key is the resource id
 auth.setResourceId("invoice");

 // finally the permissions to access that resource can be assigned:
 auth.addPermission(Permissions.READ);
 // more than one permission can be granted
 auth.addPermission(Permissions.CREATE);

 // and the authorization object is saved:
 authorizationService.saveAuthorization(auth);
    
    
  }

}